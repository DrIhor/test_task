// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	context "context"

	test_task "github.com/DrIhor/test_task/pkg/grpc"
	mock "github.com/stretchr/testify/mock"
)

// ItemStorageServer is an autogenerated mock type for the ItemStorageServer type
type ItemStorageServer struct {
	mock.Mock
}

// AddNewItem provides a mock function with given fields: _a0, _a1
func (_m *ItemStorageServer) AddNewItem(_a0 context.Context, _a1 *test_task.Item) (*test_task.ItemID, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *test_task.ItemID
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.Item) *test_task.ItemID); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.ItemID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.Item) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: _a0, _a1
func (_m *ItemStorageServer) DeleteItem(_a0 context.Context, _a1 *test_task.ItemID) (*test_task.NoneObjectResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *test_task.NoneObjectResp
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.ItemID) *test_task.NoneObjectResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.NoneObjectResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.ItemID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllItems provides a mock function with given fields: _a0, _a1
func (_m *ItemStorageServer) GetAllItems(_a0 context.Context, _a1 *test_task.NoneObjectRequest) (*test_task.EncodeItemResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *test_task.EncodeItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.NoneObjectRequest) *test_task.EncodeItemResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.EncodeItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.NoneObjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: _a0, _a1
func (_m *ItemStorageServer) GetItem(_a0 context.Context, _a1 *test_task.ItemID) (*test_task.EncodeItemResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *test_task.EncodeItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.ItemID) *test_task.EncodeItemResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.EncodeItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.ItemID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: _a0, _a1
func (_m *ItemStorageServer) UpdateItem(_a0 context.Context, _a1 *test_task.ItemID) (*test_task.EncodeItemResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *test_task.EncodeItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.ItemID) *test_task.EncodeItemResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.EncodeItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.ItemID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedItemStorageServer provides a mock function with given fields:
func (_m *ItemStorageServer) mustEmbedUnimplementedItemStorageServer() {
	_m.Called()
}
