// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	test_task "github.com/DrIhor/test_task/pkg/grpc"
)

// ItemStorageClient is an autogenerated mock type for the ItemStorageClient type
type ItemStorageClient struct {
	mock.Mock
}

// AddNewItem provides a mock function with given fields: ctx, in, opts
func (_m *ItemStorageClient) AddNewItem(ctx context.Context, in *test_task.Item, opts ...grpc.CallOption) (*test_task.ItemID, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *test_task.ItemID
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.Item, ...grpc.CallOption) *test_task.ItemID); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.ItemID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.Item, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, in, opts
func (_m *ItemStorageClient) DeleteItem(ctx context.Context, in *test_task.ItemID, opts ...grpc.CallOption) (*test_task.NoneObjectResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *test_task.NoneObjectResp
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.ItemID, ...grpc.CallOption) *test_task.NoneObjectResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.NoneObjectResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.ItemID, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllItems provides a mock function with given fields: ctx, in, opts
func (_m *ItemStorageClient) GetAllItems(ctx context.Context, in *test_task.NoneObjectRequest, opts ...grpc.CallOption) (*test_task.EncodeItemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *test_task.EncodeItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.NoneObjectRequest, ...grpc.CallOption) *test_task.EncodeItemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.EncodeItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.NoneObjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: ctx, in, opts
func (_m *ItemStorageClient) GetItem(ctx context.Context, in *test_task.ItemID, opts ...grpc.CallOption) (*test_task.EncodeItemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *test_task.EncodeItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.ItemID, ...grpc.CallOption) *test_task.EncodeItemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.EncodeItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.ItemID, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: ctx, in, opts
func (_m *ItemStorageClient) UpdateItem(ctx context.Context, in *test_task.ItemID, opts ...grpc.CallOption) (*test_task.EncodeItemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *test_task.EncodeItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *test_task.ItemID, ...grpc.CallOption) *test_task.EncodeItemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test_task.EncodeItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *test_task.ItemID, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
