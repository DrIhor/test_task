// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/DrIhor/test_task/internal/service/transport/graphQL/graph/model"
)

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, item
func (_m *MutationResolver) AddItem(ctx context.Context, item model.Iteminput) (*string, error) {
	ret := _m.Called(ctx, item)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, model.Iteminput) *string); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Iteminput) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePerson provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeletePerson(ctx context.Context, id string) (*bool, error) {
	ret := _m.Called(ctx, id)

	var r0 *bool
	if rf, ok := ret.Get(0).(func(context.Context, string) *bool); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePerson provides a mock function with given fields: ctx, id
func (_m *MutationResolver) UpdatePerson(ctx context.Context, id string) (*model.Item, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Item
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Item); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
