// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	context "context"
	csv "encoding/csv"

	mock "github.com/stretchr/testify/mock"
)

// ItemCSVServ is an autogenerated mock type for the ItemCSVServ type
type ItemCSVServ struct {
	mock.Mock
}

// AddFromCSV provides a mock function with given fields: _a0, _a1
func (_m *ItemCSVServ) AddFromCSV(_a0 context.Context, _a1 *csv.Reader) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, *csv.Reader) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *csv.Reader) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllItemsAsCSV provides a mock function with given fields: _a0
func (_m *ItemCSVServ) GetAllItemsAsCSV(_a0 context.Context) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
